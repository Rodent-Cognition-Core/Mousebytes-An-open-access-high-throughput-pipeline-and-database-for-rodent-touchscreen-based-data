#
# abedUpload.py 
# input: map_file raw_xml_file 
# map file is a text file to map the raw_xml_name (abet software fields) 
# to output_xml_name (i.e. xnat abed database fields)
# raw_xml_file: file generated by Lafayette software abet
# Function:
# convert raw xml data into XNAT abed xml data format
# upload the abed xml data into ABeD
#
# Note: the output xml file doesn't have a pretty format for human to read
# if want to read it, use xmllint --format test.xml
#
import xml.etree.ElementTree as ET
import sys
import subprocess
import re


#
# parse map file into a dictionary 
#
def parseMapFile(filename):
    """ Parse the map file
        it maps names in XML file into xnat data field name"""
    f=open(filename)
    lineNum = 0
    nameTable = dict()
    for line in f.readlines():
        if(line.startswith('#')):
            continue
        #strip while spaces and new line
        tokens=line.strip().split(",")
        if(len(tokens)==2):
            # convert xml raw name to lower case
            xmlName=tokens[0].strip().lower()
            xnatName=tokens[1].strip()
            nameTable[xmlName]=xnatName
        else:
            print "Line:",lineNum,":wrong input map format!"
        lineNum += 1
    return nameTable

#
# Parse XML file and write it into xnat xml file for uploading
#
def parseXMLFile(rawXmlfile,nameTable):
    """ Parse the xml file and put results into a hash table
    """

    #raw file 
    rawTree = ET.parse(rawXmlfile)
    rawRoot = rawTree.getroot()
    #ET.dump(rawRoot)
    valueTable = dict()

    #xnat abed xml file xRoot
    xRoot = ET.Element('abx:ABeD')
    # just put one properties file
    xRoot.set('xmlns:abx','http://nrg.wustl.edu/abx')
    xPrefix = 'abx:'

    # get session information
    sessionInfo=rawRoot.find('SessionInformation')
    # we don't know the informaiton names in advance
    # we just out put the information we got
    if(sessionInfo == None):
        print "Error: No SessionInformation found!"
        return 

    #convert session information
    for sinfo in sessionInfo.findall('Information'):
        name = sinfo.find('Name').text
        value = sinfo.find('Value').text
        if value != None:
            # convert it to lower case
            name=name.strip().lower()
            value=value.strip()
        if name in nameTable:
            xName = nameTable[name]
            if xName != None:
                valueTable[xName]=value
                #add prefix "abx:"
                xName = xPrefix + xName
                xChild = ET.SubElement(xRoot,xName)
                xChild.text=value
            else:
                print "Error: Cannot find field ",name, "in value table!"
        #else:
        #    print "Warning: No such field ",name ,"in map file"
        

    # add marker data into xnat xml file
    xMarker=ET.SubElement(xRoot,'abx:Marker')

    #convert marker data information
    markerInfo = rawRoot.find('MarkerData')
    if (markerInfo == None) :
        print "Warning: No MarkerData found!"
        return

    #Note: if results/count/time/duration is empty, we ignore this marker
    # because the xnat abed schema doesn't allow empty element
    for minfo in markerInfo.findall('Marker'):
        name = minfo.find('Name').text
        sourceType = minfo.find('SourceType').text
        if sourceType.strip() == 'Evaluation' :
            results = minfo.find('Results')
            if(results != None):
                #insert into Evaulation marker
                evalMarker=ET.SubElement(xMarker,'abx:EvaluationMarker')
                evalElem = ET.SubElement(evalMarker,"abx:Name")      
                evalElem.text = name
                evalElem = ET.SubElement(evalMarker,"abx:Results")       
                evalElem.text = results.text
            #print name,sourceType,results.text
        elif sourceType.strip() == 'Count':
            count = minfo.find('Count')
            if(count != None):
                #insert into Count marker
                countMarker=ET.SubElement(xMarker,'abx:CountMarker')
                countElem = ET.SubElement(countMarker,"abx:Name")
                countElem.text = name
                countElem = ET.SubElement(countMarker,"abx:Count")       
                countElem.text = count.text
            #print name,sourceType,count.text
        elif sourceType.strip() == 'Measure':
            time = minfo.find('Time')
            if(time != None):
                #insert into measure counter
                measureMarker=ET.SubElement(xMarker,'abx:MeasureMarker')
                measureElem = ET.SubElement(measureMarker,"abx:Name")
                measureElem.text = name
                measureElem = ET.SubElement(measureMarker,"abx:Time")       
                measureElem.text = time.text
            duration = minfo.find('Duration')
            if(duration != None):
                measureElem = ET.SubElement(measureMarker,"abx:Duration")       
                measureElem.text = duration.text 
            #print name,sourceType,time.text,duration.text
        else:
            print "Warning: Unknown Marker type "+sourceType
    return xRoot,valueTable

#
# formatID : format raw xml value
#
def formatID(raw_value):
    """ format raw values read from xml file
        to follow the database identification field requirement
        e.g. subject """
    #must remove spaces
    value=raw_value.strip().replace(" ","_")
    #remove special characteres
    value=value.replace("-","_")
    value=value.replace("/","_")
    value=value.replace(":","_")
    return value

#
#  addElemToXML: add item to xml root 
#
def addElemToXML(root,item,value):
    """ add an elem and its value into root """
    elem = ET.SubElement(root,item)
    elem.text=value
    return

#
# uploadToXnat: upload abed xnat xml file into XNAT
#              current, we use XNATRestClient to run on localhost
#              later, use curl instead 
# example: /usr/local/xnat/xnat-1.6-spred/bin/XNATRestClient -host https://localhost:8443/spred/ -u admin -p s1p2red -m PUT -remote "/data/archive/projects/ABeD/subjects/lt14x027/experiments/5CSRTT_2s_Var1_RunID_203_2014_04_23_10_55_20?xsiType=abx:ABeD" -local test.xml
# in XNATRestClient script,  java -jar /usr/local/xnat/xnat-1.6-spred/lib/xdat-restClient-1.jar
# Note: this part is hard coded -- move to conf file later
def uploadToXnat(projectId,subjectId,expLabel,filename,overwrite):

    program="/usr/local/xnat/xnat-1.6-spred/lib/xdat-restClient-1.jar"
    host="https://localhost:8443/spred/"
    user="admin"
    passwd="s1p2red"

    #check whether this experiment exists or not
    #remotePath="/data/archive/projects/"+projectId+"/subjects/"+subjectId+"/experiments/"+expLabel+"?format=JSON"
    #args = ['java','-jar',program,'-host',host,'-u',user,'-p',passwd,'-m','GET','-remote',remotePath]
    #runCommand(args)
    # need to check the results
    # if the experiment exists, and overwrite option is False, we should not upload the file. Instead, we print a warning to let user check.

    #upload xml file REST
    remotePath="/data/archive/projects/"+projectId+"/subjects/"+subjectId+"/experiments/"+expLabel+"?xsiType=abx:ABeD"
    args = ['java','-jar',program,'-host',host,'-u',user,'-p',passwd,'-m','PUT','-remote',remotePath,'-local',filename]
    #print subprocess.list2cmdline(args)
    #sys.exit(1)
    runCommand(args)
    

# runCommand
def runCommand(args):
  # subprocess allows to spawn new processes
  #print args
  #p = subprocess.Popen(args)
  # wait the child process to terminate
  #p.wait()
  # re-implement with error handler
  try:
      p = subprocess.check_output(args,stderr=subprocess.STDOUT)
      p.wait()
  except subprocess.CalledProcessError as e:   
      print "\n\nCommand:\n" + subprocess.list2cmdline(args) + "\nreturns exit code " + str(e.returncode) + ".\n\n" + e.output 
                      
      
#
# main function
#
def xmlConvert(mapfile, xmlfile):
    #if(len(sys.argv)!=3):
    #    print "Usage: "+sys.argv[0]+" <map file> <raw xml file> "
    #    sys.exit(-1)
    #map file maps raw xml datafileds into xnat abed database fileds
    #mapfile = sys.argv[1]
    #xml file is the raw xml file generated by Lafayette software abet 
    #xmlfile = sys.argv[2]

    #name table : key is the raw xml field name, value is xnat abed database field name
    abedNameTable = parseMapFile(mapfile)
    #print abedNameTable
    
    #parse xml file and conver it to xnat upload file   
    xnatRoot,abedValueTable = parseXMLFile(xmlfile,abedNameTable)

    #Not: we use Schedule_Name+Schedule_Run_ID+Exp_Date_Time as exp label
    # assume we know projectId 
    projectId = "ABeD"
    #Note: we use the animal_id's value as subject name
    #print abedValueTable
    raw_value = abedValueTable['Animal_ID']
    subjectId=formatID(raw_value);
    scheduleName=abedValueTable['Schedule_Name']
    runId = abedValueTable['Schedule_Run_ID']
    date = abedValueTable['Exp_Date_Time']
    expLabel=formatID(scheduleName+"_RunID_"+runId+"_DATE_"+date)


    #Unpack some fields and add it to xnat xml file for upload
    # configs are here
    #1. add date -- date field is inherited from xnat experiment data schema
    dateElem = ET.SubElement(xnatRoot,"abx:date")
    dateElem.text=date
    # unpack database field in raw xml file
    database = abedValueTable['Database'].split(" ")[0]
    # e.g. LON5C3XTG3MM 2 , we should remove space and ignore 2
    #first 3 chars are sites
    index = 3;
    site=database[0:index]
    #task is not fixed length, but limit to VD,5C,PAL -- otherwise, we need to recode
    task=""
    protocols=["PD","5C","PAL"]
    for protocol in protocols:
        if(database.find(protocol)!=-1):
            task = protocol
            index += len(protocol)
            break
    if(task == ""):
        print "Warning: Unknown protocol in !",database, xmlfile
        print "To fix: add the new protocol in protocols list!"

    strains=["5FAD","APP","3XTG"]
    strain=""
    for s in strains:
        if(database.find(s)!=-1):
            strain = s
            index += len(strain)
    if(strain == ""):
        print "Warning: Unknown strain in !",database, xmlfile
        print "To fix: add the new strain in strains list!"
            
    #age is in 3M,12M format -- need to validate
    age=database[index:-1]
    #last char is gender
    gender=database[-1]
 
    addElemToXML(xnatRoot,"abx:Site",site)   
    addElemToXML(xnatRoot,"abx:Task",task)   
    addElemToXML(xnatRoot,"abx:MouseStrain",strain)   
    addElemToXML(xnatRoot,"abx:MouseAge",age)   
    addElemToXML(xnatRoot,"abx:MouseGender",gender)   
    #print database,site,task,strain,age,gender
    

    #unpack Animal_Id, i.e. subjectId to get  mousenuber and cagenumber  
    #later: use regular expression
    #Note: errors occurred when the cage number increased to 3 digits. Changed the mechanism to regex. -- Shuai
    subjectId=subjectId.lower()  # some Guelph old files use Capitalized letter
#     mSite = subjectId[0]
#     genoType=subjectId[1]
#     cageNum=subjectId[2:4]
#     mStrain=subjectId[4:5]
#     mouseNum=subjectId[5:8]
    try:
        mSite, genoType, cageNum, mStrain, mouseNum = re.findall(r"[a-zA-Z]|[0-9]+", subjectId)    
    except:
        raise ValueError("unable to parse animal ID: %s" %subjectId)
    addElemToXML(xnatRoot,"abx:CageNumber",cageNum)   
    addElemToXML(xnatRoot,"abx:MouseGenoType",genoType)   
    addElemToXML(xnatRoot,"abx:MouseNumber",mouseNum)   

    return ET.tostring(xnatRoot)


